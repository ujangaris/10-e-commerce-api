#Section 13: E-Commerce API | 240. Setup
    npm install && npm start

#Section 13: E-Commerce API | 241. Basic Express Server

#Section 13: E-Commerce API | 242. connect To DB
    pada browser: mongodb Atlas => connect -> pilih yang ke 2 copy code aplication:
            mongodb+srv://ujang:<password>@nodeexpressproject.kfzgl.mongodb.net/myFirstDatabase?retryWrites=true&w=majority

    paste pada file .env dan modifikasi:
        MONGO_URL=mongodb+srv://ujang:admin0k8@nodeexpressproject.kfzgl.mongodb.net/10-e-commerce?retryWrites=true&w=majority

#Section 13: E-Commerce API | 243. Basic Routes

#Section 13: E-Commerce API | 244. notFound vs errorHandler Middleware

#Section 13: E-Commerce API | 245. Morgan Package
    Documentation: https://www.npmjs.com/package/morgan
    buka browser: http://localhost:5000
        kemudian liat pada terminal : GET / 200 - - 7.403 ms
    buka browser: http://localhost:5000/apple
        kemudian liat pada terminal : GET /apple 404 20 - 0.773 ms

#Section 13: E-Commerce API | 246. User Model

#Section 13: E-Commerce API | 247. Validator Package
    Documentation:
        npm validator: https://www.npmjs.com/package/validator
        mongoose: https://mongoosejs.com/docs/validation.html 

#Section 13: E-Commerce API | 248. Auth Routes Structure

#Section 13: E-Commerce API | 249. Postman Environment Setup
    pada postman:
        No Environment klik add trus namakan : DEV Environment
        VARIABLE                INITIAL VALUE                   CURRENT VALUE
        URL                     http://localhost:5000/api/v1    http://localhost:5000/api/v1

        kemudian save.
    
        Logout User
            GET {{URL}}/auth/logout
        Login User
            POST {{URL}}/auth/Login
        Register User
            POST {{URL}}/auth/register

#Section 13: E-Commerce API | 250. Register - Initial Setup
    Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "david",
                        "email": "david@gmail.com",
                        "password": "secret"
                    }
                hasil response:
                    {
                        "user": {
                            "name": "david",
                            "email": "david@gmail.com",
                            "password": "secret",
                            "role": "user",
                            "_id": "61a86e4f93279f8d41088271",
                            "__v": 0
                        }
                    }

#Section 13: E-Commerce API | 251. Register - Unique Email
    Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "david",
                        "email": "david@gmail.com",
                        "password": "secret"
                    }
                hasil response: 
                    {
                        "msg": "Email already exists"
                    }

#Section 13: E-Commerce API | 252. User Roles
    langkah pertama Ketika belum melakukan penambahan source code, kosongkan  database  pada mongodb atlas
     dan mencoba melakukan Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "susan",
                        "email": "susan@gmail.com",
                        "password": "secret",
                        "role": "admin"
                    }
                hasil response: 
                    {
                        "user": {
                            "name": "susan",
                            "email": "susan@gmail.com",
                            "password": "secret",
                            "role": "user",
                            "_id": "61a8737ab0e68129a25c7d00",
                            "__v": 0
                        }
                    }
                
                bisa di dihal diatas akan tidak sama untuk role.

                setelah melakukan penambahan source code lakukan langkah diatas!
                noted: jika admin sudah ada maka role admin yang dipilih akan otomatis jd user.

#Section 13: E-Commerce API | 253. Hash Passwords
    langkah pertama Ketika belum melakukan penambahan source code, kosongkan  database  pada mongodb atlas
     dan mencoba melakukan Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "susan",
                        "email": "susan@gmail.com",
                        "password": "secret"
                    }
                hasil response: 
                    {
                    "user": {
                        "name": "susan",
                        "email": "susan@gmail.com",
                        "password": "$2a$10$WjozVQKT.wFbj/PGBBKJI.H6QbvZ3pCkgPDuL0qIZKdu1DMtBDfHi",
                        "role": "admin",
                        "_id": "61a892450ba2e2138fe921f1",
                        "__v": 0
                    }
            role akan menjadi admin dikarenakan belum ada user yang terdaftar, 
            jika mencoba melakukan pengunjian kembali dan mendaftarkan user baru maka secara otomatis role akan menjadi user.

            dapat dilihat pula password akan tergenerate dengan Hash.

#Section 13: E-Commerce API | 254. JWT Setup
    langkah pertama Ketika belum melakukan penambahan source code, kosongkan  database  pada mongodb atlas
     dan mencoba melakukan Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "susan",
                        "email": "susan@gmail.com",
                        "password": "secret"
                    }
                hasil response: 
                    {
                        "user": {
                            "name": "susan",
                            "userId": "61a89743ae42f044ce0a6682",
                            "role": "admin"
                        },
                        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoic3VzYW4iLCJ1c2VySWQiOiI2MWE4OTc0M2FlNDJmMDQ0Y2UwYTY2ODIiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2Mzg0Mzg3MjMsImV4cCI6MTYzODUyNTEyM30.kQmHHo7xq-lJPT69G-uOen52g2M6v5X8mLpXI7PXFu8"
                    }

#Section 13: E-Commerce API | 255. Refactor JWT Setup
    langkah pertama Ketika belum melakukan penambahan source code, kosongkan  database  pada mongodb atlas
     dan mencoba melakukan Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "susan",
                        "email": "susan@gmail.com",
                        "password": "secret"
                    }
                hasil response: 
                    {
                        "user": {
                            "name": "susan",
                            "userId": "61a89743ae42f044ce0a6682",
                            "role": "admin"
                        },
                        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoic3VzYW4iLCJ1c2VySWQiOiI2MWE4OTc0M2FlNDJmMDQ0Y2UwYTY2ODIiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2Mzg0Mzg3MjMsImV4cCI6MTYzODUyNTEyM30.kQmHHo7xq-lJPT69G-uOen52g2M6v5X8mLpXI7PXFu8"
                    }
            dapat di lihat token tergenerate setelah di Refactor. 

#Section 13: E-Commerce API | 256. Cookies Setup
    Documentation: https://expressjs.com/en/4x/api.html#res.cookie

        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "john",
                        "email": "john@gmail.com",
                        "password": "secret"
                    }
                hasil response: 
                    {
                        "user": {
                            "name": "john",
                            "userId": "61a931379a2139c4888d49cc",
                            "role": "user"
                        }
                    }
                
            pada Postman lihat pada tab cookie, akan ada response yang tampil.

#Section 13: E-Commerce API | 257. Parse Cookies
    Pengujian pada Postman:
        GET {{URL}}
        request data maka response akan menampilkan cookie.

#Section 13: E-Commerce API | 258. Refactor Cookies Setup
    pengunjian pada Postman:
        lakukan register user, kemudian lakukan GET request user dan lihat pada terminal.

#Section 13: E-Commerce API | 259. signed and secure flags
    Documentation: https://expressjs.com/en/4x/api.html#res.cookie
    pengunjian pada Postman:
        lakukan register user, kemudian lakukan GET request user dan lihat pada terminal.

#Section 13: E-Commerce API | 260. Login Route
    Pengujian pada Postman:
        Login User:
            POST {{URL}}/auth/login
                body -> raw -> json:
                    {
                        "email": "john@gmail.com",
                        "password": "secret"
                    }
                hasil response:
                    {
                        "user": {
                            "name": "john",
                            "userId": "61a93d529115ee50eb6e3ed6",
                            "role": "admin"
                        }
                    }

#Section 13: E-Commerce API | 261. Logout Route
    Pengujian pada Postman:
        pertama lakukan login, 
        kemudian logout :  GET {{URL}}/auth/logout
        selanjutnya coba send data GET {{URL}} , maka token pada cookie tidak akan muncul kembali

#Section 13: E-Commerce API | 262. Cookies - Big Picture and "Gotchas"
    pertama-tama, copy file front-end dari final-front-end kedalam starter, kemudian ganti dengan nama public

    kemudian buka browser : http://localhost:5000
    buka inspect -. aplication -> Storage ->  Cookies : http://localhost:5000  nah coba login dengan user terdaftar 
    pada database dan logout dan lihat perbedaannya

#Section 13: E-Commerce API | 262. Cookies - Big Picture and "Gotchas" | Part 2 out front-end
    pertama-tama, copy file react-front-end dari final-front-end ke Desktop
    kemudiann buka dengan code editor, pada terminal ketikan npm install && npm start
    pada browser: http://localhost:3000/,
    kemungkinan akan error: ×Unhandled Rejection (TypeError): Failed to fetch
    untuk menghandlenya tambahkan cors

    tahap berikutya agar bisa melakukan action:
        pada react-front-end  file package.json tambahkan: proxy": "http://localhost:5000" ,setelah :
            "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:5000" => ini yang ditambahkan 

  masih pada bagian react-frond-end/app.js, uncoment code : const rootUrl = 'http://localhost:5000';
  dan hidupkan code yang dimatikan.(disini seperti matikan yang di nyalakan dan nyalakan yang di matikan codenya).
  selanjutnya lihat pada inspect -. aplication -> Storage ->  Cookies : http://localhost:5000  nah coba login dengan user terdaftar 
  pada database dan logout dan lihat perbedaannya


    dapat dilihat jika setelah login kita menekan button testing pada teminal akan tergenerate token.

#Section 13: E-Commerce API | 263. User Routes - Structure

#Section 13: E-Commerce API | 264. User Routes - Postman
    Get All Users 
        GET {{URL}}/users

    Get Single User 
        GET {{URL}}/users/123

    Show Current User 
        GET {{URL}}/users/showMe
    
    Update User
        PATCH {{URL}}/users/updateUser
        body -> raw -> json :
            {
                "name":"bobo"
            }
    Update User password
        PATCH {{URL}}/users/updateUserPassword
        body -> raw -> json :
            {
                "password":"secret"
            }

#Section 13: E-Commerce API | 265. GetAllUsers and getSingleUser
    Pengujian pada postman:
        Get All Users:
            GET {{URL}}/users
        response: akan tampil semua user yang ada pada database
        Get Single Users:
            GET {{URL}}/users/<id user terdaftar>
        response: akan tampil satu user yang ada pada database

        jika disalahkan id user /menggunakan id user sembarang responseakan menampilkan:
            {
                "msg": "No item found with id : 61aa859"
            }

#Section 13: E-Commerce API | 266. Authenticate User - Setup
    Pengujian pertama (tanpa login sebagai admin) pada postman:
        Get All Users :
            GET {{URL}}/users
        response pada terminal : error, no token present
        Get Single User :
            GET {{URL}}/users/<id user terdaftar>
        response pada terminal : error, no token present

    Pengujian kedua (dengan login sebagai admin) pada postman:
        Get All Users :
            GET {{URL}}/users
        response pada terminal :  token present
        Get Single User :
            GET {{URL}}/users/<id user terdaftar>
        response pada terminal :  token present

#Section 13: E-Commerce API | 267. Authenticate User - Complete
    Pengujian pada postman:
        Get All Users:
            GET {{URL}}/users
        response pada terminal :  { name: 'anna', userId: '61aa859e521d9e27ac0959d2', role: 'user' }

#Section 13: E-Commerce API | 268. Authorize Permission - Setup
    Pengujian pada postman:
        login sebagai user, kemudian coba 
        Get All Users:
            GET {{URL}}/users
        response  : 
            {
                "msg": "Unauthorized to access this route"
            }

        kemudian jika user logout dan mencoba melakukan 'get all user' kembali maka 
        response :
            {
                "msg": "Authentication Invalid"
            }

#Section 13: E-Commerce API | 269. Authorize Permission - Complete
        Pengujian pada postman: login sebagai user, kemudian coba 
        Get All Users:
            GET {{URL}}/users
        response  : 
            {
                "msg": "Unauthorized to access this route"
            }

        kemudian jika user logout dan mencoba melakukan 'get all user' kembali maka 
        response :
            {
                "msg": "Authentication Invalid"
            }

        pengujian diatas jika menggunakan usernya admin akan menampilkan data pada get all user 

#Section 13: E-Commerce API | 270. ShowMe Controller
        Pengujian pada postman: Show Current User
            GET {{URL}}/users/showMe 
            coba send request.
            response akan menampilkan user yang login (admin/user)

#Section 13: E-Commerce API | 271. UpdatePassword Controller
    Documentation: https://mongoosejs.com/docs/api/document.html#document_Document-save
        Pengujian pada postman: login sebagai user, kemudian coba Update User Password
            PATCH {{URL}}/users/updateUserPassword
                {
                    "newPassword":"newsecret",
                    "oldPassword":"secret"
                }
            response: "msg": "Success! Password Updated."

            setelah itu coba lagi login dengan user yang passwordnya telah di ubah dengan menggunakan password yang lama;
            response: "msg": "Invalid Credential"

            jika menggunakan password yang baru maka akan berhasil login.
            response:
                {
                    "user": {
                        "name": "anna",
                        "userId": "61aa859e521d9e27ac0959d2",
                        "role": "user"
                    }
                }

#Section 13: E-Commerce API | 272. CreateTokenUser Function

#Section 13: E-Commerce API | 273. UpdateUser Controller - FindOneAndUpdate()
        Pengujian pada postman: login sebagai user anna@gmail.com, kemudian coba Update User 
            PATCH {{URL}}/users/updateUser
            body -> raw -> json:
                {
                    "name": "newnana","email":"anna@gmail.com"
                }
            
            response:
                {
                    "user": {
                        "name": "newnana",
                        "userId": "61aa859e521d9e27ac0959d2",
                        "role": "user"
                    }
                }
            
            selanjutnya coba:
            GET {{URL}}/users/showMe 
            coba send request.
            response akan menampilkan user yang login anna namanya sudah terupdate

#Section 13: E-Commerce API | 274. UpdateUser Controller - user.save()
        Pengujian pada postman: login sebagai user anna@gmail.com, kemudian coba Update User 
            PATCH {{URL}}/users/updateUser
        kemudian coba login kembali, jika gagal coba hapus data pada databse mongoDB Atlas 

#Section 13: E-Commerce API | 275. CheckPermissions Function
        Pengujian pada postman: login sebagai user anna@gmail.com, kemudian coba get single user menggunakan id user lain
            GET {{URL}}/users/61b204f107646ad8eb5a30d0
        response : "msg": "Not authorized to access this route"

        namun ketika mencoba get single user dengan user yang sedang login/anna akan berhasil.
        coba lakukan pengujian untuk admin juga. 

#Section 13: E-Commerce API | 276. Auth Complete

#Section 13: E-Commerce API | 277. Product Model

#Section 13: E-Commerce API | 278. Product Routes - Structure

#Section 13: E-Commerce API | 279. Product Routes - Postman
        Get All Products
            GET {{URL}}/products
        Get Single Product
            GET {{URL}}/products/123
        Create Product
            POST {{URL}}/products
        Patch Product
            PATCH {{URL}}/products/123
        Delete Product
            DELETE {{URL}}/products/123
        Upload Image
            POST {{URL}}/products/uploadimage

    Pengujian pada Postman untuk create product:
        coba create Product tanpa login:
            POST {{URL}}/products
            response: "msg": "Authentication Invalid"
        
        sekarang lakukan login sebagai admin , terlebih dahulu sebelum create product:
            response: create product

    Pengujian pada Postman untuk Upload Image:
        coba create Product tanpa login:
            POST {{URL}}/products/uploadimage
            response: "msg": " Unauthorized to access this route"
        
        sekarang lakukan login sebagai admin , terlebih dahulu sebelum upload image:
            response: upload image

#Section 13: E-Commerce API | 280. CreateProduct Controller
    Pengujian pada Postman untuk Create product :
        coba create Product setelah login sebagai admin login:
            POST {{URL}}/products
            body -> raw -> json :
                {
                    "name": "testing",
                    "description": "some description"
                    "category": "office"
                    "company": "ikea", // ini harus sesui enum yang ada didatabase agar berhasil 
                }
            
            response status: 201 Created
        
        atau pengujian create data bisa dilakukan dengan mengkopi paste sorce code pada mockData/products.json

#Section 13: E-Commerce API | 281. Remaining Product Controllers
    pengujian pada postman:
        login sebagai admin, kemudian get all products, copi id salah satu product lalu pastekan pada :
        single product
            GET {{URL}}/products/<id poduct>
            send response, hasil response: akan menampilkan peroduct sesuai id 
        Update product
            PATCH {{URL}}/products/<id poduct>
                body -> raw -> json :
                {"name": "New testing product"}
        Delete product
            DELETE {{URL}}/products/<id poduct>
            send response, hasil response: "msg": "Success! Product removed."
        
        periksa kembali dengan Get All product : GET {{URL}}/products.

        untuk lebih memastikan keamanan , coba login sebagai user yang bukan admin,
        kemudian lakukan Get All Products, Get Single product maka ,response akan menampilkan data

        namun jika mencoba untuk update, delete data maka, 
        response akan menampilkan: "msg": " Unauthorized to access this route"
        
#Section 13: E-Commerce API | 282. Upload Image Controllers
    pada root buat folder public/uploads
    copy file image pada final/public/upload yang bernama: example.jpeg kedalam directory public/uploads kita.
    kemudian coba lakukan create data pada postman , agar lebih mudah copy pada file mockData:
     POST {{URL}}/products
        body -> raw -> json :
        {
            "name": "accent chair",
            "price": 25999,
            "colors": ["#ff0000", "#00ff00", "#0000ff"],
            "company": "marcos",
            "description": "Cloud bread VHS hell of banjo bicycle rights jianbing umami mumblecore etsy 8-bit pok pok +1 wolf. Vexillologist yr dreamcatcher waistcoat, authentic chillwave trust fund. Viral typewriter fingerstache pinterest pork belly narwhal. Schlitz venmo everyday carry kitsch pitchfork chillwave iPhone taiyaki trust fund hashtag kinfolk microdosing gochujang live-edge",
            "category": "office"
        }

        untuk image kosongin , lalu send response, 
        pada hasil response maka image akan tergenerate dengan : "image": "/uploads/example.jpeg",

        agar lebih meyakinkan benar atau tidaknya gambar tersave secara default ,
        coba buka browsher : http://localhost:5000/uploads/example.jpeg
        hasil browser akan menampilkan gambar
        


