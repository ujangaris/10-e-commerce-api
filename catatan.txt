#Section 13: E-Commerce API | 240. Setup
    npm install && npm start

#Section 13: E-Commerce API | 241. Basic Express Server

#Section 13: E-Commerce API | 242. connect To DB
    pada browser: mongodb Atlas => connect -> pilih yang ke 2 copy code aplication:
            mongodb+srv://ujang:<password>@nodeexpressproject.kfzgl.mongodb.net/myFirstDatabase?retryWrites=true&w=majority

    paste pada file .env dan modifikasi:
        MONGO_URL=mongodb+srv://ujang:admin0k8@nodeexpressproject.kfzgl.mongodb.net/10-e-commerce?retryWrites=true&w=majority

#Section 13: E-Commerce API | 243. Basic Routes

#Section 13: E-Commerce API | 244. notFound vs errorHandler Middleware

#Section 13: E-Commerce API | 245. Morgan Package
    Documentation: https://www.npmjs.com/package/morgan
    buka browser: http://localhost:5000
        kemudian liat pada terminal : GET / 200 - - 7.403 ms
    buka browser: http://localhost:5000/apple
        kemudian liat pada terminal : GET /apple 404 20 - 0.773 ms

#Section 13: E-Commerce API | 246. User Model

#Section 13: E-Commerce API | 247. Validator Package
    Documentation:
        npm validator: https://www.npmjs.com/package/validator
        mongoose: https://mongoosejs.com/docs/validation.html 

#Section 13: E-Commerce API | 248. Auth Routes Structure

#Section 13: E-Commerce API | 249. Postman Environment Setup
    pada postman:
        No Environment klik add trus namakan : DEV Environment
        VARIABLE                INITIAL VALUE                   CURRENT VALUE
        URL                     http://localhost:5000/api/v1    http://localhost:5000/api/v1

        kemudian save.
    
        Logout User
            GET {{URL}}/auth/logout
        Login User
            POST {{URL}}/auth/Login
        Register User
            POST {{URL}}/auth/register

#Section 13: E-Commerce API | 250. Register - Initial Setup
    Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "david",
                        "email": "david@gmail.com",
                        "password": "secret"
                    }
                hasil response:
                    {
                        "user": {
                            "name": "david",
                            "email": "david@gmail.com",
                            "password": "secret",
                            "role": "user",
                            "_id": "61a86e4f93279f8d41088271",
                            "__v": 0
                        }
                    }

#Section 13: E-Commerce API | 251. Register - Unique Email
    Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "david",
                        "email": "david@gmail.com",
                        "password": "secret"
                    }
                hasil response: 
                    {
                        "msg": "Email already exists"
                    }

#Section 13: E-Commerce API | 252. User Roles
    langkah pertama Ketika belum melakukan penambahan source code, kosongkan  database  pada mongodb atlas
     dan mencoba melakukan Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "susan",
                        "email": "susan@gmail.com",
                        "password": "secret",
                        "role": "admin"
                    }
                hasil response: 
                    {
                        "user": {
                            "name": "susan",
                            "email": "susan@gmail.com",
                            "password": "secret",
                            "role": "user",
                            "_id": "61a8737ab0e68129a25c7d00",
                            "__v": 0
                        }
                    }
                
                bisa di dihal diatas akan tidak sama untuk role.

                setelah melakukan penambahan source code lakukan langkah diatas!
                noted: jika admin sudah ada maka role admin yang dipilih akan otomatis jd user.

#Section 13: E-Commerce API | 253. Hash Passwords
    langkah pertama Ketika belum melakukan penambahan source code, kosongkan  database  pada mongodb atlas
     dan mencoba melakukan Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "susan",
                        "email": "susan@gmail.com",
                        "password": "secret"
                    }
                hasil response: 
                    {
                    "user": {
                        "name": "susan",
                        "email": "susan@gmail.com",
                        "password": "$2a$10$WjozVQKT.wFbj/PGBBKJI.H6QbvZ3pCkgPDuL0qIZKdu1DMtBDfHi",
                        "role": "admin",
                        "_id": "61a892450ba2e2138fe921f1",
                        "__v": 0
                    }
            role akan menjadi admin dikarenakan belum ada user yang terdaftar, 
            jika mencoba melakukan pengunjian kembali dan mendaftarkan user baru maka secara otomatis role akan menjadi user.

            dapat dilihat pula password akan tergenerate dengan Hash.

#Section 13: E-Commerce API | 254. JWT Setup
    langkah pertama Ketika belum melakukan penambahan source code, kosongkan  database  pada mongodb atlas
     dan mencoba melakukan Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "susan",
                        "email": "susan@gmail.com",
                        "password": "secret"
                    }
                hasil response: 
                    {
                        "user": {
                            "name": "susan",
                            "userId": "61a89743ae42f044ce0a6682",
                            "role": "admin"
                        },
                        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoic3VzYW4iLCJ1c2VySWQiOiI2MWE4OTc0M2FlNDJmMDQ0Y2UwYTY2ODIiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2Mzg0Mzg3MjMsImV4cCI6MTYzODUyNTEyM30.kQmHHo7xq-lJPT69G-uOen52g2M6v5X8mLpXI7PXFu8"
                    }

#Section 13: E-Commerce API | 255. Refactor JWT Setup
    langkah pertama Ketika belum melakukan penambahan source code, kosongkan  database  pada mongodb atlas
     dan mencoba melakukan Pengujian pada Postman:
        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "susan",
                        "email": "susan@gmail.com",
                        "password": "secret"
                    }
                hasil response: 
                    {
                        "user": {
                            "name": "susan",
                            "userId": "61a89743ae42f044ce0a6682",
                            "role": "admin"
                        },
                        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoic3VzYW4iLCJ1c2VySWQiOiI2MWE4OTc0M2FlNDJmMDQ0Y2UwYTY2ODIiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE2Mzg0Mzg3MjMsImV4cCI6MTYzODUyNTEyM30.kQmHHo7xq-lJPT69G-uOen52g2M6v5X8mLpXI7PXFu8"
                    }
            dapat di lihat token tergenerate setelah di Refactor. 

#Section 13: E-Commerce API | 256. Cookies Setup
    Documentation: https://expressjs.com/en/4x/api.html#res.cookie

        Register User:
            POST {{URL}}/auth/register
                body -> raw -> json:
                    {
                        "name": "john",
                        "email": "john@gmail.com",
                        "password": "secret"
                    }
                hasil response: 
                    {
                        "user": {
                            "name": "john",
                            "userId": "61a931379a2139c4888d49cc",
                            "role": "user"
                        }
                    }
                
            pada Postman lihat pada tab cookie, akan ada response yang tampil.

#Section 13: E-Commerce API | 257. Parse Cookies
    Pengujian pada Postman:
        GET {{URL}}
        request data maka response akan menampilkan cookie.

#Section 13: E-Commerce API | 258. Refactor Cookies Setup
    pengunjian pada Postman:
        lakukan register user, kemudian lakukan GET request user dan lihat pada terminal.

#Section 13: E-Commerce API | 259. signed and secure flags
    Documentation: https://expressjs.com/en/4x/api.html#res.cookie
    pengunjian pada Postman:
        lakukan register user, kemudian lakukan GET request user dan lihat pada terminal.

#Section 13: E-Commerce API | 260. Login Route
    Pengujian pada Postman:
        Login User:
            POST {{URL}}/auth/login
                body -> raw -> json:
                    {
                        "email": "john@gmail.com",
                        "password": "secret"
                    }
                hasil response:
                    {
                        "user": {
                            "name": "john",
                            "userId": "61a93d529115ee50eb6e3ed6",
                            "role": "admin"
                        }
                    }

#Section 13: E-Commerce API | 261. Logout Route
    Pengujian pada Postman:
        pertama lakukan login, 
        kemudian logout :  GET {{URL}}/auth/logout
        selanjutnya coba send data GET {{URL}} , maka token pada cookie tidak akan muncul kembali

#Section 13: E-Commerce API | 262. Cookies - Big Picture and "Gotchas"
    pertama-tama, copy file front-end dari final-front-end kedalam starter, kemudian ganti dengan nama public

    kemudian buka browser : http://localhost:5000
    buka inspect -. aplication -> Storage ->  Cookies : http://localhost:5000  nah coba login dengan user terdaftar 
    pada database dan logout dan lihat perbedaannya

#Section 13: E-Commerce API | 262. Cookies - Big Picture and "Gotchas" | Part 2 out front-end
    pertama-tama, copy file react-front-end dari final-front-end ke Desktop
    kemudiann buka dengan code editor, pada terminal ketikan npm install && npm start
    pada browser: http://localhost:3000/,
    kemungkinan akan error: ×Unhandled Rejection (TypeError): Failed to fetch
    untuk menghandlenya tambahkan cors

    tahap berikutya agar bisa melakukan action:
        pada react-front-end  file package.json tambahkan: proxy": "http://localhost:5000" ,setelah :
            "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "proxy": "http://localhost:5000" => ini yang ditambahkan 

  masih pada bagian react-frond-end/app.js, uncoment code : const rootUrl = 'http://localhost:5000';
  dan hidupkan code yang dimatikan.(disini seperti matikan yang di nyalakan dan nyalakan yang di matikan codenya).
  selanjutnya lihat pada inspect -. aplication -> Storage ->  Cookies : http://localhost:5000  nah coba login dengan user terdaftar 
  pada database dan logout dan lihat perbedaannya


    dapat dilihat jika setelah login kita menekan button testing pada teminal akan tergenerate token.

#Section 13: E-Commerce API | 263. User Routes - Structure

#Section 13: E-Commerce API | 264. User Routes - Postman
    Get All Users 
        GET {{URL}}/users

    Get Single User 
        GET {{URL}}/users/123

    Show Current User 
        GET {{URL}}/users/showMe
    
    Update User
        PATCH {{URL}}/users/updateUser
        body -> raw -> json :
            {
                "name":"bobo"
            }
    Update User password
        PATCH {{URL}}/users/updateUserPassword
        body -> raw -> json :
            {
                "password":"secret"
            }

                